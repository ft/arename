# vim:ft=perl
# example arename global hooks file

sub print_banner0 {
    # Yes, everything handed over to hooks (except for the namespace)
    # are references. This gives us simple two way communication, but
    # it's also a pretty big hammer. Think before screwing up. :)
    my ($namespace, $nameref, $verref, $confref, $suptagsref, $argvref) = @_;

    print "BANNER! $$nameref $$verref " . $argvref->[0] . "\n";

    # The following actually changes the $NAME variable, used
    # in ARename.pm, which doesn't hurt, because it is only the
    # name of the program running. For other hooks there might
    # be vital data in one of the references.
    # If you're not sure about your code debug it *first*.
    # -d (dry-run) is your friend!
    $$nameref =~ s/name/blame/;
}
register_hook('startup', \&print_banner0);

sub print_banner1 {
    my ($namespace, $nameref, $verref, $confref, $suptagsref, $argvref) = @_;

    # Since $NAME used to be 'arename', the substitution
    # in print_banner0() will have changed $NAME to 'areblame.pl',
    # which $$nameref below will reveal.
    print "ANOTHER BANNER! $$nameref $$verref\n";
}
register_hook('startup', \&print_banner1);
