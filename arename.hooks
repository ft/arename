# vim:ft=perl
# example arename global hooks file

sub print_banner0 {
    # Yes, everything handed over to hooks (except for the namespace)
    # are references. This gives us simple two way communication, but
    # it's also a pretty big hammer. Think before screwing up. :)
    my ($namespace, $nameref, $verref, $confref, $extref, $suptagsref, $argvref) = @_;

    print "BANNER! $$nameref $$verref $argvref->[0]\n";

    # The following actually changes the $NAME variable, used
    # in ARename.pm, which doesn't hurt, because it is only the
    # name of the program running. For other hooks there might
    # be vital data in one of the references.
    # If you're not sure about your code debug it *first*.
    # -d (dry-run) is your friend!
    $$nameref =~ s/name/blame/;
}
register_hook('startup', \&print_banner0);

sub print_banner1 {
    my ($namespace, $nameref, $verref, $confref, $extref, $suptagsref, $argvref) = @_;

    # Since $NAME used to be 'arename.pl', the substitution
    # in print_banner0() will have changed $NAME to 'areblame.pl',
    # which $$nameref below will reveal.
    print "ANOTHER BANNER! $$nameref $$verref\n";
}
register_hook('startup', \&print_banner1);

sub replace_spaces_by_underscore {
    # A simple way to post process generated file names, for
    # people who dislike whitespace in file names.
    my ($namespace, $templateref, $datref) = @_;

    $$templateref =~ s/\s+/_/g;
}
register_hook('post_expand_template', \&replace_spaces_by_underscore);

sub remove_empty_subdirs {
    # When arename.pl renames files, it can be quite likely, that
    # due to the rename the directory a file was in previously will
    # become empty. arename.pl itself will not remove such directories
    # and it will not in the future. If you want such house keeping,
    # you can achieve that by a hook, like this one.
    # Note, that this an example; there are probably better solutions.
    my ($namespace, $fileref) = @_;
    my $dir = dirname($$fileref);
    my $rc;

    do {
        return if ($dir eq '.');
        $rc = rmdir $dir;
        if ($rc) { oprint("removed empty dir: \"$dir\"\n"); }
        $dir = dirname($dir);

    } while ($rc);
}
register_hook('file_done', \&remove_empty_subdirs);
