#!/usr/bin/perl
# Copyright 2007-2011
# Frank Terbeck <ft@bewatermyfriend.org>, All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   1. Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer.
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS OF THE
#  PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
#  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=pod

=head1 NAME

ataglist - print audio file metadata

=head1 SYNOPSIS

ataglist FILE

=head1 OPTIONS AND ARGUMENTS

I<ataglist> only takes one argument. An audio file to work on. All
other arguments are ignored silently.

=head1 DESCRIPTION

I<ataglist> transparently outputs tagname-tagvalue pairs in the
following format:

 tag-name
 tag-value

It can be used to find out and use meta-information from audio files in
shell scripts and the like.

Calling this program by hand is probably not that useful.

=head1 SEE ALSO

L</arename(1)>.

=head1 AUTHOR

Frank Terbeck E<lt>ft@bewatermyfriend.orgE<gt>,

=head1 LICENCE

Same as listed in L</arename(1)>.

=cut


use warnings;
use strict;
use ARename;
use English '-no_match_vars';

my ( $NAME, $VERSION ) = qw( ataglist v0.8 );

sub list {
    my ($datref, $ext) = @_;

    foreach my $tag (sort keys %{ $datref }) {
        if (defined $datref->{$tag} && $datref->{$tag} ne q{}) {
            print "$tag\n" . $datref->{$tag} . "\n";
        }
    }

    return 1;
}

if ($#ARGV < 0) {
    print "$NAME $VERSION\n";
    print "From arename version:\n";
    ## no critic (RequireInterpolationOfMetachars)
    print '            @@arenameversioninfo@@' . "\n";
    ## use critic
    ARename::show_version();
    print "\n  usage: $NAME FILE\n";
    exit 0;
}

my $file = $ARGV[0];

if (! -r $file) {
    die "Can't read \"$file\": $ERRNO\n";
}

ARename::set_nameversion($NAME, $VERSION);
ARename::set_postproc(\&main::list);
ARename::set_default_options();
ARename::disable_hooks();
ARename::apply_defaults();
ARename::set_opt("quiet", 1);
ARename::set_opt("oprefix", q{});
ARename::set_opt("ambiguoususefirst", 1);
ARename::set_file($file);
ARename::process_file();
exit 0;
